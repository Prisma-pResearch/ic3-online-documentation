"use strict";(self.webpackChunkic_3_online_document=self.webpackChunkic_3_online_document||[]).push([[5648],{4137:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),u=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return n?a.createElement(h,s(s({ref:t},c),{},{components:n})):a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:r,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},425:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7294),r=n(6010);const o="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,s),hidden:n},t)}},3992:(e,t,n)=>{n.d(t,{Z:()=>T});var a=n(7462),r=n(7294),o=n(6010),s=n(2957),i=n(6550),l=n(5238),u=n(3609),c=n(2560);function d(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,l._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function b(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=p(e),[s,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[l,u]=h({queryString:n,groupId:a}),[d,b]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,c.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),f=(()=>{const e=l??d;return m({value:e,tabValues:o})?e:null})();(0,r.useEffect)((()=>{f&&i(f)}),[f]);return{selectedValue:s,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);i(e),u(e),b(e)}),[u,b,o]),tabValues:o}}var f=n(1048);const y="tabList__CuJ",v="tabItem_LNqP";function g(e){let{className:t,block:n,selectedValue:i,selectValue:l,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,s.o5)(),p=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==i&&(d(t),l(a))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:p},s,{className:(0,o.Z)("tabs__item",v,s?.className,{"tabs__item--active":i===t})}),n??t)})))}function k(e){let{lazy:t,children:n,selectedValue:a}=e;if(t){const e=n.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},n.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=b(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",y)},r.createElement(g,(0,a.Z)({},e,t)),r.createElement(k,(0,a.Z)({},e,t)))}function T(e){const t=(0,f.Z)();return r.createElement(w,(0,a.Z)({key:String(t)},e))}},4294:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var a=n(7462),r=(n(7294),n(4137)),o=n(3992),s=n(425);const i={sidebar_position:1,title:"Connect with Database",description:"Tutorials to connect with IC3 databases"},l=void 0,u={unversionedId:"tutorials/For Members/connectWithDatabase",id:"tutorials/For Members/connectWithDatabase",title:"Connect with Database",description:"Tutorials to connect with IC3 databases",source:"@site/docs/tutorials/For Members/connectWithDatabase.mdx",sourceDirName:"tutorials/For Members",slug:"/tutorials/For Members/connectWithDatabase",permalink:"/ic3-online-documentation/docs/tutorials/For Members/connectWithDatabase",draft:!1,editUrl:"https://github.com/Prisma-pResearch/ic3-online-documentation/edit/main/websites/docs/tutorials/For Members/connectWithDatabase.mdx",tags:[],version:"current",lastUpdatedBy:"srisharanya Injarapu",lastUpdatedAt:1738621240,formattedLastUpdatedAt:"Feb 3, 2025",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Connect with Database",description:"Tutorials to connect with IC3 databases"},sidebar:"tutorialSidebar",previous:{title:"Instructions for Team Members",permalink:"/ic3-online-documentation/docs/category/instructions-for-team-members"},next:{title:"Connect with UF Health VPN",permalink:"/ic3-online-documentation/docs/tutorials/For Members/connectWithUFHealthVPN"}},c={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Instructions",id:"instructions",level:2}],p={toc:d};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"IC",(0,r.kt)("sup",null,"3")," have built and maintained multiple databases to store the ",(0,r.kt)("strong",{parentName:"p"},"cleaned data"),".\nWith the database, researchers are able to understand the datasets and filter the research sub-cohort easily.\nOur data has two different data models:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"UF IDR(Integrated Data Registry) format"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://ohdsi.github.io/CommonDataModel/cdm54.html"},"OMOP CDM v5.4"),(0,r.kt)("admonition",{parentName:"li",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"In the future, all of data will be in ",(0,r.kt)("strong",{parentName:"p"},"OMOP CDM"),". We are working hard to fully map the Epic data now.")))),(0,r.kt)("h2",{id:"instructions"},"Instructions"),(0,r.kt)("p",null,"Currently, we have three data servers."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"Prod-MySQL",label:"Prod-MySQL",mdxType:"TabItem"},(0,r.kt)("p",null,"The database schemas are hosted by a MySQL server.",(0,r.kt)("br",null),"\nThe authentication and authorization of the data server is managed by UF Health IT, to obtain the access to the database, please refer to the instructions ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorials/For%20PI/Accesses#databases"},"here"),".",(0,r.kt)("br",null),"\nTo work with the database, we recommend to use ",(0,r.kt)("a",{parentName:"p",href:"https://www.mysql.com/products/workbench/"},"MySQL Workbench")," software.",(0,r.kt)("br",null)),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"HostPath: mysql07.ahc.ufl.edu"),(0,r.kt)("li",{parentName:"ul"},"Port: 3306"))),(0,r.kt)(s.Z,{value:"Prod-MSSQL",label:"Prod-MSSQL",mdxType:"TabItem"},(0,r.kt)("p",null,"The database schemas are hosted by a SQL server.",(0,r.kt)("br",null),"\nThe authentication and authorization of the data server is managed by UF Health IT, to obtain the access to the database, please refer to the instructions ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorials/For%20PI/Accesses#databases"},"here"),".",(0,r.kt)("br",null),"\nTo work with the database, we recommend to use ",(0,r.kt)("a",{parentName:"p",href:"https://dbeaver.io/"},"DBeaver")," software.",(0,r.kt)("br",null)),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"HostPath: ahc-prismapdb.ahc.ufl.edu"),(0,r.kt)("li",{parentName:"ul"},"Port: 1433")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="databaseConnection.py"',title:'"databaseConnection.py"'},'from sqlalchemy import create_engine \nfrom sqlalchemy.engine import URL \n#highlight-next-line\n# build connection with Windows Authentication\nconnection_string = ( \n\n    r"Driver={ODBC Driver 17 for SQL Server};"     \n\n    r"Server={AHC-PRISMAPDB.AHC.UFL.EDU};"     \n\n    r"Database={PRISMAP_IDEALIST};"     \n\n    r"Trusted_Connection=yes;" \n\n) \n\nconnection_url = URL.create( \n\n    "mssql+pyodbc",  \n\n    query={"odbc_connect": connection_string} \n\n) \n\nengine = create_engine(connection_url) \n'))),(0,r.kt)(s.Z,{value:"Test-MSSQL",label:"Test-MSSQL",mdxType:"TabItem"},(0,r.kt)("p",null,"The database schemas are hosted by a MySQL data server.",(0,r.kt)("br",null),"\nThe authentication and authorization of the data server is managed by IC",(0,r.kt)("sup",null,"3")," Data Core, to obtain the access to the database, please refer to the instructions ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorials/For%20PI/Accesses#shared-folder-and-databases"},"here"),".",(0,r.kt)("br",null),"\nTo work with the database, we recommend to use ",(0,r.kt)("a",{parentName:"p",href:"https://dbeaver.io/"},"DBeaver")," software.",(0,r.kt)("br",null),"\nHostPath: 10.14.134.118\nPort: 1434"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-py",metastring:'title="databaseConnection.py"',title:'"databaseConnection.py"'},'\nfrom sqlalchemy import create_engine \nfrom sqlalchemy.engine import URL \n#highlight-next-line\n# build connection with SQL Server Authentication\nconnection_string = ( \n\n  r"Driver={SQL Server Native Client 11.0};"     \n\n  r"Server= {10.14.134.118,1434};"     \n\n  r"Database= {IDEALIST_OMOP};"     \n\n  "UID={xxusernamexxhere};"             \n\n  "PWD={xxxpasswordxxhere};"    \n) \n\nconnection_url = URL.create( \n\n  "mssql+pyodbc",  \n\n  query={"odbc_connect": connection_string} \n\n) \n\nengine = create_engine(connection_url) \n')))),(0,r.kt)("admonition",{title:"UF Health VPN",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"All databases are protected under UF Health restricted network. ",(0,r.kt)("a",{parentName:"p",href:"/ic3-online-documentation/docs/tutorials/For%20Members/connectWithUFHealthVPN"},"UF Health VPN")," is ",(0,r.kt)("strong",{parentName:"p"},"necessary")," to build the connection.")))}m.isMDXComponent=!0}}]);